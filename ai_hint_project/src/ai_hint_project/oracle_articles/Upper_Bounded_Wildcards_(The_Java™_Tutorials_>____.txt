Upper Bounded Wildcards (The Java™ Tutorials >        
            Learning the Java Language > Generics (Updated))
A browser with JavaScript enabled is required for this page to operate properly.
Documentation
The Java™ Tutorials
Hide TOC
Generics (Updated)
Why Use Generics?
Generic Types
Raw Types
Generic Methods
Bounded Type Parameters
Generic Methods and Bounded Type Parameters
Generics, Inheritance, and Subtypes
Type Inference
Wildcards
Upper Bounded Wildcards
Unbounded Wildcards
Lower Bounded Wildcards
Wildcards and Subtyping
Wildcard Capture and Helper Methods
Guidelines for Wildcard Use
Type Erasure
Erasure of Generic Types
Erasure of Generic Methods
Effects of Type Erasure and Bridge Methods
Non-Reifiable Types
Restrictions on Generics
Questions and Exercises
Trail:
Learning the Java Language
Lesson:
Generics (Updated)
Section:
Wildcards
Home Page
>
Learning the Java Language
>
Generics (Updated)
« Previous
•
Trail
•
Next »
The Java Tutorials have been written for JDK 8. Examples and practices described in this page don't take advantage of improvements introduced in later releases and might use technology no longer available.
See
Dev.java
for updated tutorials taking advantage of the latest releases.
See
Java Language Changes
for a summary of updated language features in Java SE 9 and subsequent releases.
See
JDK Release Notes
for information about new features, enhancements, and removed or deprecated options for all JDK releases.
Upper Bounded Wildcards
You can use an upper bounded wildcard to relax the restrictions on a variable.  For example, say you want to write a method that works on
List<Integer>
,
List<Double>
,
and
List<Number>
;  you can achieve this by using an upper bounded wildcard.
To declare an upper-bounded wildcard, use the wildcard character ('
?
'), followed by the
extends
keyword, followed by its
upper bound
. Note that, in this context,
extends
is used in a general sense to mean either "extends" (as in classes) or "implements" (as in interfaces).
To write the method that works on lists of
Number
and the subtypes of
Number
, such as
Integer
,
Double
, and
Float
, you would specify
List<? extends Number>
. The term
List<Number>
is more restrictive than
List<? extends Number>
because the former matches a list of type
Number
only, whereas the latter matches a list of type
Number
or any of its subclasses.
Consider the following
process
method:
public static void process(List
<? extends Foo>
list) { /* ... */ }
The upper bounded wildcard,
<? extends Foo>
, where
Foo
is any type, matches
Foo
and any subtype of
Foo
. The
process
method can access the list elements as type
Foo
:
public static void process(List<? extends Foo> list) {
    for (Foo elem : list) {
        // ...
    }
}
In the
foreach
clause, the
elem
variable iterates over each element in the list. Any method defined in the
Foo
class can now be used on
elem
.
The
sumOfList
method returns the sum of the numbers in a list:
public static double sumOfList(List<? extends Number> list) {
    double s = 0.0;
    for (Number n : list)
        s += n.doubleValue();
    return s;
}
The following code, using a list of
Integer
objects, prints
sum = 6.0
:
List<Integer> li = Arrays.asList(1, 2, 3);
System.out.println("sum = " + sumOfList(li));
A list of
Double
values can use the same
sumOfList
method. The following code prints
sum = 7.0
:
List<Double> ld = Arrays.asList(1.2, 2.3, 3.5);
System.out.println("sum = " + sumOfList(ld));
« Previous
•
Trail
•
Next »
About Oracle
|
Contact Us
|
Legal Notices
|
Terms of Use
|
Your Privacy Rights
Copyright © 1995, 2024 Oracle and/or its affiliates. All rights reserved.
Previous page:
Wildcards
Next page:
Unbounded Wildcards